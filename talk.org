* Clojure en vrai


* Qui suis-je ?


Florent D'halluin


 - Data-scientist (et bien plus ...) @ Netheos
 - email : flo@flal.net
 - twitter : @flal

* Clojure ?


Un __LISP__ pour la JVM (mais pas que...)

[[./img/lisp_xkcd.png]]

* Pourquoi Clojure 


- Programmation interactive
- JVM => pas besoin de réinventer la roue
- Un language fonctionnel :  force a découper en **petites** fonctions
- immutabilité partout
- séparation data/code
-  code **is** data ( homoiconicité ) => :  meta-programation, DSLs 

* L'exercice du jour : Les specs 

Une API REST pour papa noël

- On peut créer / consulter une liste. Et ajouter des cadeaux

- Le père Noël peut faire sa liste de course

* live-code 1 : clojure basics

On fait chauffer lein ! 

* live-code 2 : Ring et Compojure-api

 [ring "1.7.1"] 

 [metosin/compojure-api "2.0.0-alpha28"]

 
* live-code 3 : specs à la rescousse

 Définissons notre modèle de données 

 Et notre api !

* live-code 4 : SQL avec honeysql 

* live-code 5 : toutes les fonctions sql complètes

* live-code 6 : api <-> db 

* live-code 7 : api "listes de course"

* Mais encore 


- Programmation asynchrone
- Clojurescript : Clojure pour le front (ou node...)
- Injection de dependances 
- le formidable écosystème

* Clojure : ou pas  

- tas de parenthèses
- code dense
- typage dynamique
- écosystème volatil 
- le coté "alien" de la JVM :
  - Les stacktracess font saigner les yeux
  - Les exceptions

